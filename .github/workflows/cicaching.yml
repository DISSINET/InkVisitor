name: deploy-1772-use-caching-in-ci

on:
  push:
    branches:
      - 1772-use-caching-in-ci

jobs:
  preinstall-client:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [16]
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: packages/client/pnpm-lock.yaml
      - name: Install dependencies
        run: |
          cd packages/client
          pnpm install
        
  preinstall-server:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [16]
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: packages/server/pnpm-lock.yaml
      - name: Install dependencies
        run: |
          cd packages/server
          pnpm install
        
  staging-build:
    needs: [preinstall-client, preinstall-server]
    name: Build the staging docker image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: packages/server/pnpm-lock.yaml
      - name: Install server dependencies
        run: |
          cd packages/server
          pnpm install
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: packages/client/pnpm-lock.yaml
      - name: Install client dependencies
        run: |
          cd packages/client
          pnpm install
          
      - name: Create env file for client
        run: |
          touch packages/client/env/.env.staging
          echo "$CLIENT_ENV" >> packages/client/env/.env.staging
        env:
          CLIENT_ENV: ${{secrets.CLIENT_ENV}}

      - name: Generate certificates
        run: |
          mkdir -p ./packages/server/secret
          openssl req -x509 -newkey rsa:2048 -nodes -out ./packages/server/secret/cert.pem -keyout ./packages/server/secret/key.pem -days 365 -subj "/C=FR/O=krkr/OU=Domain Control Validated/CN=*"

      # Pull the latest image to build, and avoid caching pull-only images.
      # (docker pull is faster than caching in most cases.)
      - run: docker-compose pull

      - name: Check server node modules
        run: |
          cd packages/server        
          ls 
        
      - name: Check client node modules
        run: |
          cd packages/client        
          ls 
          
      - name: Run docker build task
        run: DOCKER_BUILDKIT=1 docker-compose build inkvisitor-staging

      - name: Save docker-compose stack
        run: docker save inkvisitor:staging | gzip > inkvisitor-staging.tar.gz

      - name: Cache image.tar
        uses: actions/cache@v2
        with:
          path: inkvisitor-staging.tar.gz
          key: inkvisitor-staging-${{ github.sha }}.tar.gz

  deploy:
    needs: [staging-build]
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout InkVisitor
        uses: actions/checkout@v2

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: inkvisitor-data-import.tar.gz
          key: inkvisitor-data-import-${{ github.sha }}.tar.gz

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Update packages
        run: |
          sudo apt-get update

      - name: Install OpenVPN
        run: |
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Prepare OpenVPN creds file
        run: |
          touch pass.txt
          echo ${{ secrets.VPN_USER }} >> pass.txt
          echo ${{ secrets.VPN_PASS }} >> pass.txt

      - name: Pull OpenVPN Config
        run: curl https://it.muni.cz/media/3404274/muni-main-linux.ovpn -o muni-linux.ovpn

      - name: Connect to VPN and deploy
        run: sudo openvpn --config muni-linux.ovpn --auth-user-pass pass.txt --daemon

      - name: Wait for a VPN connection
        timeout-minutes: 2
        run: until ping -w 2 ${{ secrets.SSH_HOST }}; do sleep 2; done

      - name: Upload image staging
        run: scp inkvisitor-staging.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/html/apps

      - name: Load image
        run: |
          ssh -tt ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}  -- "sh -c '
          podman container prune -f &&
          podman image prune -f &&
          rm -rf /var/tmp/docker-tar* &&
          podman rm inkvisitor-staging --force || true &&
          podman load -i /var/www/html/apps/inkvisitor-staging.tar.gz &&
          podman-compose -f /var/www/html/apps/docker-compose.yml up -d inkvisitor-staging &&
          '"
